// Code generated by capnpc-go. DO NOT EDIT.

package np

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type FileBlock struct{ capnp.Struct }

// FileBlock_TypeID is the unique identifier for the type FileBlock.
const FileBlock_TypeID = 0xd5a2538369c2f82a

func NewFileBlock(s *capnp.Segment) (FileBlock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FileBlock{st}, err
}

func NewRootFileBlock(s *capnp.Segment) (FileBlock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FileBlock{st}, err
}

func ReadRootFileBlock(msg *capnp.Message) (FileBlock, error) {
	root, err := msg.RootPtr()
	return FileBlock{root.Struct()}, err
}

func (s FileBlock) String() string {
	str, _ := text.Marshal(0xd5a2538369c2f82a, s.Struct)
	return str
}

func (s FileBlock) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s FileBlock) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FileBlock) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s FileBlock) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s FileBlock) HasKey() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FileBlock) SetKey(v []byte) error {
	return s.Struct.SetData(1, v)
}

// FileBlock_List is a list of FileBlock.
type FileBlock_List struct{ capnp.List }

// NewFileBlock creates a new list of FileBlock.
func NewFileBlock_List(s *capnp.Segment, sz int32) (FileBlock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return FileBlock_List{l}, err
}

func (s FileBlock_List) At(i int) FileBlock { return FileBlock{s.List.Struct(i)} }

func (s FileBlock_List) Set(i int, v FileBlock) error { return s.List.SetStruct(i, v.Struct) }

func (s FileBlock_List) String() string {
	str, _ := text.MarshalList(0xd5a2538369c2f82a, s.List)
	return str
}

// FileBlock_Promise is a wrapper for a FileBlock promised by a client call.
type FileBlock_Promise struct{ *capnp.Pipeline }

func (p FileBlock_Promise) Struct() (FileBlock, error) {
	s, err := p.Pipeline.Struct()
	return FileBlock{s}, err
}

type File struct{ capnp.Struct }

// File_TypeID is the unique identifier for the type File.
const File_TypeID = 0xecfda38634f4591a

func NewFile(s *capnp.Segment) (File, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return File{st}, err
}

func NewRootFile(s *capnp.Segment) (File, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return File{st}, err
}

func ReadRootFile(msg *capnp.Message) (File, error) {
	root, err := msg.RootPtr()
	return File{root.Struct()}, err
}

func (s File) String() string {
	str, _ := text.Marshal(0xecfda38634f4591a, s.Struct)
	return str
}

func (s File) BlockSize() uint16 {
	return s.Struct.Uint16(0)
}

func (s File) SetBlockSize(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s File) Blocks() (FileBlock_List, error) {
	p, err := s.Struct.Ptr(0)
	return FileBlock_List{List: p.List()}, err
}

func (s File) HasBlocks() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s File) SetBlocks(v FileBlock_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewBlocks sets the blocks field to a newly
// allocated FileBlock_List, preferring placement in s's segment.
func (s File) NewBlocks(n int32) (FileBlock_List, error) {
	l, err := NewFileBlock_List(s.Struct.Segment(), n)
	if err != nil {
		return FileBlock_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// File_List is a list of File.
type File_List struct{ capnp.List }

// NewFile creates a new list of File.
func NewFile_List(s *capnp.Segment, sz int32) (File_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return File_List{l}, err
}

func (s File_List) At(i int) File { return File{s.List.Struct(i)} }

func (s File_List) Set(i int, v File) error { return s.List.SetStruct(i, v.Struct) }

func (s File_List) String() string {
	str, _ := text.MarshalList(0xecfda38634f4591a, s.List)
	return str
}

// File_Promise is a wrapper for a File promised by a client call.
type File_Promise struct{ *capnp.Pipeline }

func (p File_Promise) Struct() (File, error) {
	s, err := p.Pipeline.Struct()
	return File{s}, err
}

type Link struct{ capnp.Struct }

// Link_TypeID is the unique identifier for the type Link.
const Link_TypeID = 0xe419a0e5a661965c

func NewLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Link{st}, err
}

func NewRootLink(s *capnp.Segment) (Link, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Link{st}, err
}

func ReadRootLink(msg *capnp.Message) (Link, error) {
	root, err := msg.RootPtr()
	return Link{root.Struct()}, err
}

func (s Link) String() string {
	str, _ := text.Marshal(0xe419a0e5a661965c, s.Struct)
	return str
}

func (s Link) Target() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Link) HasTarget() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Link) TargetBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Link) SetTarget(v string) error {
	return s.Struct.SetText(0, v)
}

// Link_List is a list of Link.
type Link_List struct{ capnp.List }

// NewLink creates a new list of Link.
func NewLink_List(s *capnp.Segment, sz int32) (Link_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Link_List{l}, err
}

func (s Link_List) At(i int) Link { return Link{s.List.Struct(i)} }

func (s Link_List) Set(i int, v Link) error { return s.List.SetStruct(i, v.Struct) }

func (s Link_List) String() string {
	str, _ := text.MarshalList(0xe419a0e5a661965c, s.List)
	return str
}

// Link_Promise is a wrapper for a Link promised by a client call.
type Link_Promise struct{ *capnp.Pipeline }

func (p Link_Promise) Struct() (Link, error) {
	s, err := p.Pipeline.Struct()
	return Link{s}, err
}

type Special struct{ capnp.Struct }

// Special_TypeID is the unique identifier for the type Special.
const Special_TypeID = 0xdc74a897ce683c6b

func NewSpecial(s *capnp.Segment) (Special, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Special{st}, err
}

func NewRootSpecial(s *capnp.Segment) (Special, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Special{st}, err
}

func ReadRootSpecial(msg *capnp.Message) (Special, error) {
	root, err := msg.RootPtr()
	return Special{root.Struct()}, err
}

func (s Special) String() string {
	str, _ := text.Marshal(0xdc74a897ce683c6b, s.Struct)
	return str
}

func (s Special) Type() Special_Type {
	return Special_Type(s.Struct.Uint16(0))
}

func (s Special) SetType(v Special_Type) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Special) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Special) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Special) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Special_List is a list of Special.
type Special_List struct{ capnp.List }

// NewSpecial creates a new list of Special.
func NewSpecial_List(s *capnp.Segment, sz int32) (Special_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Special_List{l}, err
}

func (s Special_List) At(i int) Special { return Special{s.List.Struct(i)} }

func (s Special_List) Set(i int, v Special) error { return s.List.SetStruct(i, v.Struct) }

func (s Special_List) String() string {
	str, _ := text.MarshalList(0xdc74a897ce683c6b, s.List)
	return str
}

// Special_Promise is a wrapper for a Special promised by a client call.
type Special_Promise struct{ *capnp.Pipeline }

func (p Special_Promise) Struct() (Special, error) {
	s, err := p.Pipeline.Struct()
	return Special{s}, err
}

type Special_Type uint16

// Special_Type_TypeID is the unique identifier for the type Special_Type.
const Special_Type_TypeID = 0x8932d2d84f4dd27a

// Values of Special_Type.
const (
	Special_Type_socket   Special_Type = 0
	Special_Type_block    Special_Type = 1
	Special_Type_chardev  Special_Type = 2
	Special_Type_fifopipe Special_Type = 3
	Special_Type_unknown  Special_Type = 4
)

// String returns the enum's constant name.
func (c Special_Type) String() string {
	switch c {
	case Special_Type_socket:
		return "socket"
	case Special_Type_block:
		return "block"
	case Special_Type_chardev:
		return "chardev"
	case Special_Type_fifopipe:
		return "fifopipe"
	case Special_Type_unknown:
		return "unknown"

	default:
		return ""
	}
}

// Special_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Special_TypeFromString(c string) Special_Type {
	switch c {
	case "socket":
		return Special_Type_socket
	case "block":
		return Special_Type_block
	case "chardev":
		return Special_Type_chardev
	case "fifopipe":
		return Special_Type_fifopipe
	case "unknown":
		return Special_Type_unknown

	default:
		return 0
	}
}

type Special_Type_List struct{ capnp.List }

func NewSpecial_Type_List(s *capnp.Segment, sz int32) (Special_Type_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Special_Type_List{l.List}, err
}

func (l Special_Type_List) At(i int) Special_Type {
	ul := capnp.UInt16List{List: l.List}
	return Special_Type(ul.At(i))
}

func (l Special_Type_List) Set(i int, v Special_Type) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SubDir struct{ capnp.Struct }

// SubDir_TypeID is the unique identifier for the type SubDir.
const SubDir_TypeID = 0xa4a421ce00f301dd

func NewSubDir(s *capnp.Segment) (SubDir, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SubDir{st}, err
}

func NewRootSubDir(s *capnp.Segment) (SubDir, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SubDir{st}, err
}

func ReadRootSubDir(msg *capnp.Message) (SubDir, error) {
	root, err := msg.RootPtr()
	return SubDir{root.Struct()}, err
}

func (s SubDir) String() string {
	str, _ := text.Marshal(0xa4a421ce00f301dd, s.Struct)
	return str
}

func (s SubDir) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SubDir) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SubDir) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SubDir) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

// SubDir_List is a list of SubDir.
type SubDir_List struct{ capnp.List }

// NewSubDir creates a new list of SubDir.
func NewSubDir_List(s *capnp.Segment, sz int32) (SubDir_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SubDir_List{l}, err
}

func (s SubDir_List) At(i int) SubDir { return SubDir{s.List.Struct(i)} }

func (s SubDir_List) Set(i int, v SubDir) error { return s.List.SetStruct(i, v.Struct) }

func (s SubDir_List) String() string {
	str, _ := text.MarshalList(0xa4a421ce00f301dd, s.List)
	return str
}

// SubDir_Promise is a wrapper for a SubDir promised by a client call.
type SubDir_Promise struct{ *capnp.Pipeline }

func (p SubDir_Promise) Struct() (SubDir, error) {
	s, err := p.Pipeline.Struct()
	return SubDir{s}, err
}

type Inode struct{ capnp.Struct }
type Inode_attributes Inode
type Inode_attributes_Which uint16

const (
	Inode_attributes_Which_dir     Inode_attributes_Which = 0
	Inode_attributes_Which_file    Inode_attributes_Which = 1
	Inode_attributes_Which_link    Inode_attributes_Which = 2
	Inode_attributes_Which_special Inode_attributes_Which = 3
)

func (w Inode_attributes_Which) String() string {
	const s = "dirfilelinkspecial"
	switch w {
	case Inode_attributes_Which_dir:
		return s[0:3]
	case Inode_attributes_Which_file:
		return s[3:7]
	case Inode_attributes_Which_link:
		return s[7:11]
	case Inode_attributes_Which_special:
		return s[11:18]

	}
	return "Inode_attributes_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Inode_TypeID is the unique identifier for the type Inode.
const Inode_TypeID = 0xc0029f81b3eee594

func NewInode(s *capnp.Segment) (Inode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Inode{st}, err
}

func NewRootInode(s *capnp.Segment) (Inode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return Inode{st}, err
}

func ReadRootInode(msg *capnp.Message) (Inode, error) {
	root, err := msg.RootPtr()
	return Inode{root.Struct()}, err
}

func (s Inode) String() string {
	str, _ := text.Marshal(0xc0029f81b3eee594, s.Struct)
	return str
}

func (s Inode) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Inode) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Inode) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Inode) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Inode) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Inode) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Inode) Attributes() Inode_attributes { return Inode_attributes(s) }

func (s Inode_attributes) Which() Inode_attributes_Which {
	return Inode_attributes_Which(s.Struct.Uint16(8))
}
func (s Inode_attributes) Dir() (SubDir, error) {
	if s.Struct.Uint16(8) != 0 {
		panic("Which() != dir")
	}
	p, err := s.Struct.Ptr(1)
	return SubDir{Struct: p.Struct()}, err
}

func (s Inode_attributes) HasDir() bool {
	if s.Struct.Uint16(8) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Inode_attributes) SetDir(v SubDir) error {
	s.Struct.SetUint16(8, 0)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDir sets the dir field to a newly
// allocated SubDir struct, preferring placement in s's segment.
func (s Inode_attributes) NewDir() (SubDir, error) {
	s.Struct.SetUint16(8, 0)
	ss, err := NewSubDir(s.Struct.Segment())
	if err != nil {
		return SubDir{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Inode_attributes) File() (File, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != file")
	}
	p, err := s.Struct.Ptr(1)
	return File{Struct: p.Struct()}, err
}

func (s Inode_attributes) HasFile() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Inode_attributes) SetFile(v File) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFile sets the file field to a newly
// allocated File struct, preferring placement in s's segment.
func (s Inode_attributes) NewFile() (File, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewFile(s.Struct.Segment())
	if err != nil {
		return File{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Inode_attributes) Link() (Link, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != link")
	}
	p, err := s.Struct.Ptr(1)
	return Link{Struct: p.Struct()}, err
}

func (s Inode_attributes) HasLink() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Inode_attributes) SetLink(v Link) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLink sets the link field to a newly
// allocated Link struct, preferring placement in s's segment.
func (s Inode_attributes) NewLink() (Link, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewLink(s.Struct.Segment())
	if err != nil {
		return Link{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Inode_attributes) Special() (Special, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != special")
	}
	p, err := s.Struct.Ptr(1)
	return Special{Struct: p.Struct()}, err
}

func (s Inode_attributes) HasSpecial() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Inode_attributes) SetSpecial(v Special) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSpecial sets the special field to a newly
// allocated Special struct, preferring placement in s's segment.
func (s Inode_attributes) NewSpecial() (Special, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewSpecial(s.Struct.Segment())
	if err != nil {
		return Special{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Inode) Aclkey() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Inode) HasAclkey() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Inode) AclkeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Inode) SetAclkey(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Inode) ModificationTime() uint32 {
	return s.Struct.Uint32(12)
}

func (s Inode) SetModificationTime(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s Inode) CreationTime() uint32 {
	return s.Struct.Uint32(16)
}

func (s Inode) SetCreationTime(v uint32) {
	s.Struct.SetUint32(16, v)
}

// Inode_List is a list of Inode.
type Inode_List struct{ capnp.List }

// NewInode creates a new list of Inode.
func NewInode_List(s *capnp.Segment, sz int32) (Inode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return Inode_List{l}, err
}

func (s Inode_List) At(i int) Inode { return Inode{s.List.Struct(i)} }

func (s Inode_List) Set(i int, v Inode) error { return s.List.SetStruct(i, v.Struct) }

func (s Inode_List) String() string {
	str, _ := text.MarshalList(0xc0029f81b3eee594, s.List)
	return str
}

// Inode_Promise is a wrapper for a Inode promised by a client call.
type Inode_Promise struct{ *capnp.Pipeline }

func (p Inode_Promise) Struct() (Inode, error) {
	s, err := p.Pipeline.Struct()
	return Inode{s}, err
}

func (p Inode_Promise) Attributes() Inode_attributes_Promise {
	return Inode_attributes_Promise{p.Pipeline}
}

// Inode_attributes_Promise is a wrapper for a Inode_attributes promised by a client call.
type Inode_attributes_Promise struct{ *capnp.Pipeline }

func (p Inode_attributes_Promise) Struct() (Inode_attributes, error) {
	s, err := p.Pipeline.Struct()
	return Inode_attributes{s}, err
}

func (p Inode_attributes_Promise) Dir() SubDir_Promise {
	return SubDir_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Inode_attributes_Promise) File() File_Promise {
	return File_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Inode_attributes_Promise) Link() Link_Promise {
	return Link_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Inode_attributes_Promise) Special() Special_Promise {
	return Special_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Dir struct{ capnp.Struct }

// Dir_TypeID is the unique identifier for the type Dir.
const Dir_TypeID = 0x8a228653b964fd48

func NewDir(s *capnp.Segment) (Dir, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Dir{st}, err
}

func NewRootDir(s *capnp.Segment) (Dir, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Dir{st}, err
}

func ReadRootDir(msg *capnp.Message) (Dir, error) {
	root, err := msg.RootPtr()
	return Dir{root.Struct()}, err
}

func (s Dir) String() string {
	str, _ := text.Marshal(0x8a228653b964fd48, s.Struct)
	return str
}

func (s Dir) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Dir) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Dir) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Dir) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Dir) Location() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Dir) HasLocation() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Dir) LocationBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Dir) SetLocation(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Dir) Contents() (Inode_List, error) {
	p, err := s.Struct.Ptr(2)
	return Inode_List{List: p.List()}, err
}

func (s Dir) HasContents() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Dir) SetContents(v Inode_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewContents sets the contents field to a newly
// allocated Inode_List, preferring placement in s's segment.
func (s Dir) NewContents(n int32) (Inode_List, error) {
	l, err := NewInode_List(s.Struct.Segment(), n)
	if err != nil {
		return Inode_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Dir) Parent() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Dir) HasParent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Dir) ParentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Dir) SetParent(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Dir) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s Dir) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Dir) Aclkey() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Dir) HasAclkey() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Dir) AclkeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Dir) SetAclkey(v string) error {
	return s.Struct.SetText(4, v)
}

func (s Dir) ModificationTime() uint32 {
	return s.Struct.Uint32(8)
}

func (s Dir) SetModificationTime(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s Dir) CreationTime() uint32 {
	return s.Struct.Uint32(12)
}

func (s Dir) SetCreationTime(v uint32) {
	s.Struct.SetUint32(12, v)
}

// Dir_List is a list of Dir.
type Dir_List struct{ capnp.List }

// NewDir creates a new list of Dir.
func NewDir_List(s *capnp.Segment, sz int32) (Dir_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Dir_List{l}, err
}

func (s Dir_List) At(i int) Dir { return Dir{s.List.Struct(i)} }

func (s Dir_List) Set(i int, v Dir) error { return s.List.SetStruct(i, v.Struct) }

func (s Dir_List) String() string {
	str, _ := text.MarshalList(0x8a228653b964fd48, s.List)
	return str
}

// Dir_Promise is a wrapper for a Dir promised by a client call.
type Dir_Promise struct{ *capnp.Pipeline }

func (p Dir_Promise) Struct() (Dir, error) {
	s, err := p.Pipeline.Struct()
	return Dir{s}, err
}

type UserGroup struct{ capnp.Struct }

// UserGroup_TypeID is the unique identifier for the type UserGroup.
const UserGroup_TypeID = 0xee5217621d9cbb3a

func NewUserGroup(s *capnp.Segment) (UserGroup, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UserGroup{st}, err
}

func NewRootUserGroup(s *capnp.Segment) (UserGroup, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UserGroup{st}, err
}

func ReadRootUserGroup(msg *capnp.Message) (UserGroup, error) {
	root, err := msg.RootPtr()
	return UserGroup{root.Struct()}, err
}

func (s UserGroup) String() string {
	str, _ := text.Marshal(0xee5217621d9cbb3a, s.Struct)
	return str
}

func (s UserGroup) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s UserGroup) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s UserGroup) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s UserGroup) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s UserGroup) IyoId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s UserGroup) HasIyoId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s UserGroup) IyoIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s UserGroup) SetIyoId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s UserGroup) IyoInt() uint64 {
	return s.Struct.Uint64(0)
}

func (s UserGroup) SetIyoInt(v uint64) {
	s.Struct.SetUint64(0, v)
}

// UserGroup_List is a list of UserGroup.
type UserGroup_List struct{ capnp.List }

// NewUserGroup creates a new list of UserGroup.
func NewUserGroup_List(s *capnp.Segment, sz int32) (UserGroup_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return UserGroup_List{l}, err
}

func (s UserGroup_List) At(i int) UserGroup { return UserGroup{s.List.Struct(i)} }

func (s UserGroup_List) Set(i int, v UserGroup) error { return s.List.SetStruct(i, v.Struct) }

func (s UserGroup_List) String() string {
	str, _ := text.MarshalList(0xee5217621d9cbb3a, s.List)
	return str
}

// UserGroup_Promise is a wrapper for a UserGroup promised by a client call.
type UserGroup_Promise struct{ *capnp.Pipeline }

func (p UserGroup_Promise) Struct() (UserGroup, error) {
	s, err := p.Pipeline.Struct()
	return UserGroup{s}, err
}

type ACI struct{ capnp.Struct }
type ACI_uid ACI
type ACI_gid ACI
type ACI_uid_Which uint16

const (
	ACI_uid_Which_null  ACI_uid_Which = 0
	ACI_uid_Which_value ACI_uid_Which = 1
)

func (w ACI_uid_Which) String() string {
	const s = "nullvalue"
	switch w {
	case ACI_uid_Which_null:
		return s[0:4]
	case ACI_uid_Which_value:
		return s[4:9]

	}
	return "ACI_uid_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type ACI_gid_Which uint16

const (
	ACI_gid_Which_null  ACI_gid_Which = 0
	ACI_gid_Which_value ACI_gid_Which = 1
)

func (w ACI_gid_Which) String() string {
	const s = "nullvalue"
	switch w {
	case ACI_gid_Which_null:
		return s[0:4]
	case ACI_gid_Which_value:
		return s[4:9]

	}
	return "ACI_gid_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ACI_TypeID is the unique identifier for the type ACI.
const ACI_TypeID = 0xe7b4959415dabf9c

func NewACI(s *capnp.Segment) (ACI, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return ACI{st}, err
}

func NewRootACI(s *capnp.Segment) (ACI, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return ACI{st}, err
}

func ReadRootACI(msg *capnp.Message) (ACI, error) {
	root, err := msg.RootPtr()
	return ACI{root.Struct()}, err
}

func (s ACI) String() string {
	str, _ := text.Marshal(0xe7b4959415dabf9c, s.Struct)
	return str
}

func (s ACI) Uname() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ACI) HasUname() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ACI) UnameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ACI) SetUname(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ACI) Gname() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ACI) HasGname() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ACI) GnameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ACI) SetGname(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ACI) Mode() uint16 {
	return s.Struct.Uint16(0)
}

func (s ACI) SetMode(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s ACI) Rights() (ACI_Right_List, error) {
	p, err := s.Struct.Ptr(2)
	return ACI_Right_List{List: p.List()}, err
}

func (s ACI) HasRights() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ACI) SetRights(v ACI_Right_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewRights sets the rights field to a newly
// allocated ACI_Right_List, preferring placement in s's segment.
func (s ACI) NewRights(n int32) (ACI_Right_List, error) {
	l, err := NewACI_Right_List(s.Struct.Segment(), n)
	if err != nil {
		return ACI_Right_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s ACI) Id() uint32 {
	return s.Struct.Uint32(4)
}

func (s ACI) SetId(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ACI) Uid() ACI_uid { return ACI_uid(s) }

func (s ACI_uid) Which() ACI_uid_Which {
	return ACI_uid_Which(s.Struct.Uint16(2))
}
func (s ACI_uid) SetNull() {
	s.Struct.SetUint16(2, 0)

}

func (s ACI_uid) Value() uint32 {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != value")
	}
	return s.Struct.Uint32(8)
}

func (s ACI_uid) SetValue(v uint32) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetUint32(8, v)
}

func (s ACI) Gid() ACI_gid { return ACI_gid(s) }

func (s ACI_gid) Which() ACI_gid_Which {
	return ACI_gid_Which(s.Struct.Uint16(12))
}
func (s ACI_gid) SetNull() {
	s.Struct.SetUint16(12, 0)

}

func (s ACI_gid) Value() uint32 {
	if s.Struct.Uint16(12) != 1 {
		panic("Which() != value")
	}
	return s.Struct.Uint32(16)
}

func (s ACI_gid) SetValue(v uint32) {
	s.Struct.SetUint16(12, 1)
	s.Struct.SetUint32(16, v)
}

// ACI_List is a list of ACI.
type ACI_List struct{ capnp.List }

// NewACI creates a new list of ACI.
func NewACI_List(s *capnp.Segment, sz int32) (ACI_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return ACI_List{l}, err
}

func (s ACI_List) At(i int) ACI { return ACI{s.List.Struct(i)} }

func (s ACI_List) Set(i int, v ACI) error { return s.List.SetStruct(i, v.Struct) }

func (s ACI_List) String() string {
	str, _ := text.MarshalList(0xe7b4959415dabf9c, s.List)
	return str
}

// ACI_Promise is a wrapper for a ACI promised by a client call.
type ACI_Promise struct{ *capnp.Pipeline }

func (p ACI_Promise) Struct() (ACI, error) {
	s, err := p.Pipeline.Struct()
	return ACI{s}, err
}

func (p ACI_Promise) Uid() ACI_uid_Promise { return ACI_uid_Promise{p.Pipeline} }

// ACI_uid_Promise is a wrapper for a ACI_uid promised by a client call.
type ACI_uid_Promise struct{ *capnp.Pipeline }

func (p ACI_uid_Promise) Struct() (ACI_uid, error) {
	s, err := p.Pipeline.Struct()
	return ACI_uid{s}, err
}

func (p ACI_Promise) Gid() ACI_gid_Promise { return ACI_gid_Promise{p.Pipeline} }

// ACI_gid_Promise is a wrapper for a ACI_gid promised by a client call.
type ACI_gid_Promise struct{ *capnp.Pipeline }

func (p ACI_gid_Promise) Struct() (ACI_gid, error) {
	s, err := p.Pipeline.Struct()
	return ACI_gid{s}, err
}

type ACI_Right struct{ capnp.Struct }

// ACI_Right_TypeID is the unique identifier for the type ACI_Right.
const ACI_Right_TypeID = 0xe615914de76be38f

func NewACI_Right(s *capnp.Segment) (ACI_Right, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ACI_Right{st}, err
}

func NewRootACI_Right(s *capnp.Segment) (ACI_Right, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ACI_Right{st}, err
}

func ReadRootACI_Right(msg *capnp.Message) (ACI_Right, error) {
	root, err := msg.RootPtr()
	return ACI_Right{root.Struct()}, err
}

func (s ACI_Right) String() string {
	str, _ := text.Marshal(0xe615914de76be38f, s.Struct)
	return str
}

func (s ACI_Right) Right() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ACI_Right) HasRight() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ACI_Right) RightBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ACI_Right) SetRight(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ACI_Right) Usergroupid() uint16 {
	return s.Struct.Uint16(0)
}

func (s ACI_Right) SetUsergroupid(v uint16) {
	s.Struct.SetUint16(0, v)
}

// ACI_Right_List is a list of ACI_Right.
type ACI_Right_List struct{ capnp.List }

// NewACI_Right creates a new list of ACI_Right.
func NewACI_Right_List(s *capnp.Segment, sz int32) (ACI_Right_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ACI_Right_List{l}, err
}

func (s ACI_Right_List) At(i int) ACI_Right { return ACI_Right{s.List.Struct(i)} }

func (s ACI_Right_List) Set(i int, v ACI_Right) error { return s.List.SetStruct(i, v.Struct) }

func (s ACI_Right_List) String() string {
	str, _ := text.MarshalList(0xe615914de76be38f, s.List)
	return str
}

// ACI_Right_Promise is a wrapper for a ACI_Right promised by a client call.
type ACI_Right_Promise struct{ *capnp.Pipeline }

func (p ACI_Right_Promise) Struct() (ACI_Right, error) {
	s, err := p.Pipeline.Struct()
	return ACI_Right{s}, err
}

const schema_ae9223e76351538a = "x\xda\xacV\x7fh\x14\xdb\x15>\xdf\xbd\xb3;\xbb\xb2" +
	"\xe9\xeetV\xfc\x81a\xdb\xb4\x856\xd4\xa0Q\xc1\x86" +
	"\x96h\xaa\xad\x11\xa5\xde\xacR,\x0aNv'\xc9\xb8" +
	"\x9b\xddewV\x89 \xa9\x16\xa4\x0d\x14\x89$\xfd\x85" +
	"\xa1j\xb5\xf8O\x7f`-Tj\xa9\x96B\xa1T[" +
	"mCm\xd1Ri}\x01y\xc8\x83\xe7\xe3)\x987" +
	"\x8f\xb3\x93\xccN\xf2\xd6\x7f\x1e\xef\xbf;g\xce=\xdf" +
	"9\xdf\xf9\xee\xb9w\x83+\xb7\x89\x8d\x91\x7fjDj" +
	"k$\xea\x9d\xb8\xbf\xf7k\x0f\xeew\x7f\x87\x8c\xb4\xf0" +
	"\x0a_\x1c\xb9\xfb\xfd\xab\xeeC\"\x98J\xfc\xd9<," +
	"t\"\xf3\xa0\x18'x\xbb\xe6\xf37\xb2g:&H" +
	"% \xbc\x89\xac\xca\xcd}\xea\xdc\xcf)\x12a\x97I" +
	"q\xda\x9cf\xe7M\x93\xe2O \xbc\xfb\x08o\xdf\xfd" +
	"\xe4\xe5\xcbF\x02!W\xb0\xeb\x98\xf6#\xf3\x94\xc6\xab" +
	"\x93Z/\xc1\x9bz\xf2\xecW\xa7~,nq\\\x19" +
	"r\x96\xec2\xa3\x9d3\xaf\xb0\xf3\xa6\x8b\xda\xd7A\xf0" +
	"\xa6\x1f}\xf3\\\xfb\xce\x99\xbf\x93JAz\xe7\x7f\xff" +
	"\xef\x95S\xd3\xd7\xe7\xe8\x80\xd4!\x105\x1fG.\x11" +
	"\xcc\xc7\x91\xe3\x04\xaf\xf3\xc5\x1f\x9coe/\xcd\xd2\xd2" +
	"$\x1a%})z\xcd\xdc\x19\xe5\xd5\xf6(\xfb\x06\x85" +
	"\xab\x04>\x90\xf1L\xf4\x92y%\xba\x8a\xc8\xfcY\xc3" +
	"\xf9\xd0\xf7\xac\x9f>\xb9\xb0\xe6\xff\xd4\xa2\xba\xb8>a" +
	"\x1a:\xaf\xdat\xae\xee\xec\xff\x0as{'W\xbe\xc1" +
	"\xf9\xa2\x99\xaf\xef\xbc^\xbffni8o\xd49p" +
	"\xf0\xbb\x15\x15\x93\xfaisZ_E\xb4iF?\xcb" +
	"T\x9c\xfc\xeb\xd0\x91\xb9;\xd1\xa7-\xa9\x809\x1fc" +
	"*\xe6c\x1cx\xed\xc1\xe7\x9b\xcf\xfcd\xfe\xcd\x96\xe5" +
	"\x1d\x8cO\x98V\x9cW\x87\xe3\xec\xdc\xf3\xdb\xf3\xed\x83" +
	"\xab\x06\x9e-wn\x10w'~\xcd\x9cm8\xdf\x8b" +
	"\xff\x82\xe0%\xfe\xd3S\xf9B\xbd\xf6\x92\xd4\xc7!\x9b" +
	"\xbd\xe4$4h\xa6\xb3\xe2)\xc1\x1c]1G\xf0F" +
	"\xcby\xbb\xd8\x95\xb3D\xa5T\xe9\xc9V\xec\x9cc\x15" +
	"\xbb\xf6\x8fUl\xa2}\x80JC\x10\x19[z\x88\x00" +
	"c}7\x11\x84\xf1\x99>\"H\xa3}7\x114c" +
	"M\x1fQo\xad\x9c+\xd8nf\xb0X\xce\x15\xc6s" +
	"#V5o\x1f\xf3\x86\x9c\xa1r\xc5\xe1H4^/" +
	"\x15J\xe5\xe3\xa5\x00\x0e\x0c\xb7\xc3\xa96@>!5" +
	"\"\x0dD\xc6\xbdN\"\xf5\x17\x09\xf5@\xc0\x00\xd2`" +
	"\xe3\xecn\"\xf5\x0f\x09\xf5_\x01C\x08?\xa5Gl" +
	"|(\xa1^\x08\x18R\xa6!\x89\x8cwz\x88\xd4[" +
	"\x12\xea\x95\x00\xb444\"\xe3%\x87|.1\x00\x01" +
	"#\xa2\xa5\x11!2\xe6\xd9\xf1\x85DVckT\xa4" +
	"\x11%2\x81\x09\xa2\xac\x06\x89l\x8a\xed\xbaL7z" +
	"\xd1\x86\xa3D\xd9\x04\xdbWC Y\xb2Fm$H" +
	" A\xf0\x8a\xe5\x9c\xe5:\xe5\x12\x11\x05\xb6\\\xb9\xe4" +
	"\xda%\xb7\xc6\xb6\x8f\x11\xf6I \xd5l\x03\x81\x8d\xbd" +
	"\x15\xabj\x97\xdc\xc5=\xc9\x9as\xc2F\x9c\x04\xe2\x84" +
	"^+W,\xd8cA\xbc\xd1r\xde\x19rr\x16\x18" +
	"h\xbf3j\x13!F\x021\xc6\xaa\xda>~\x92\x7f" +
	"\x04\xe6%Dg\xeb\x83;\xa4Se\xae\xb5\x80\xeb\xb6" +
	"\x0e\"\x15\x93Pi\x01}\x19Zsk\x7f\xa9\x9c\x87" +
	"\xcd;W\x07;\x7f\xc8\x94NI\xa8\x0b\x02\x8bM\x9a" +
	"a\xdb\x0f$\xd4e\x01VzS\x83\xc6\xc5o\x900" +
	"\xa4\xcf\xb1\xf1]f\xfe\xdb\x12jJ\xc0\xd0|\x82\x8d" +
	"\xc9\x89f\xc0F\x8fb\x1c\xf1(\x91:/\xa1\xae." +
	"\xa3|\x09U\x9e\xe5\xbaUg\xb0\xee\x92\xb4k\x1f5" +
	"o\xdb\xbf\xdc\xdf\xa5\x0f;y\x15\x93Z\xc2\xf3\xfcd" +
	"?\xc7\x95~ZBm\x10h\xc7{\xdeB\xba|8" +
	"\xd4g%\xd4fN\xb7^,R4s\xcc*\xd6_" +
	"\x13\xfa+N\xd1\xce\xf4\xf1yanc\x01\xb7\xe1\xe8" +
	"\xc1\x09X\xdf\x11\x8a=b\xd5F\xd0F\x02m\xe4\xf7" +
	"ma\xbd\xac\xe5\x15;\xa7;VQi@\xe8:A" +
	"g\x92\x0f\xf7k\x00\x03\xbc\xce\x10\x9e;V\xb1\x91l" +
	"\xc6  IH\xe6-\xd7j\x0d\xbd\xc7)\x15\xfc\xe9" +
	"\x11\x12[OSl\xbd\xaeU\x1d\xb6\xdd\xd6zc\xca" +
	"3\x03\xce\xf0\x88\xbb\x8c\x97\xee\x16i\x0e\x12\xa9\xcfK" +
	"\xa8\xad\x02\x99*\xef\x09b\xd6kvu\xb8Z\xae\x93" +
	"^q\xf2\xd0I@o\x81D\x0dv\x82\xdb\xc0@\xb7" +
	"\x0f\xad\xd6\x05\xb8\xbff\xdc_J\xa8\x9b\xa1~\xdc`" +
	"\xe3u\x09u\x8b\xc5\xee\x0f\xa4\xdf1g\xbf\x91P\x7f" +
	"\xe4\x81$\xfc\x81t\x9b\xcb\xbe\xb90\xcf4\xf8\x13i" +
	"v-\x91\xfa\x9b\x84z(\x80\x08Bw\x86\xf1\xaf\x0e" +
	"\x12\x88\"t\xa3\x1a\xb7;Hd\xeaa\xfdg\x86\x97" +
	"\x9c\x06.j\xb1\xc2\xde\x06\x0b\xb5\xe6\xd0\x09j\xf3\x87" +
	"\x8et\xf2\x8br\xd4\xebN\x9e\xb5\xddB\xf1\xf5\x90\xe2" +
	"#-\x14\xbfp\x94?\x84\xe2}Y\x84\xba:\xd0\x0c" +
	"\xb1H\xee\xc6\x9e\x85\xae\xee\x12\xf0\x1a7J\xd69A" +
	"h\xd6\xd8\xb0\x85j\x0c\x9e\x14~\x8dKQ\x0f\xd4\xec" +
	"j\xe6\xab\xd5r\xbd\xc2\xc8\x89\x00y'\xd7\xb4MB" +
	"\xed\x09\xf5\xb5\x9f+\xda!\xa1\xf65\xfb\xba\x97\xd3\xd9" +
	"%\xa1\xf6/\x1bC\x19g\xac\xdc\x9f_\xfc\xea\xe5\xaf" +
	"\x92\x1b\x8c\xa5%\xf7*\x0fQ\xbb\xcb\x9fT\xc9\xbak" +
	"\xd7TJj\xeb<\x0f>\x84\xc5\xc7\xfb\x90\x84\x1a\xf1" +
	"\xf9\x85/\x1e\x9bS<\"\xa1\x8a\x02\xedb\xde[\x90" +
	"\x8f\xc3\xe6\xbc\x84\xaa\x08\xb4\xcbWl\xe6&\x8d\xf6\x11" +
	"\xa9\x11\x09\xe5\x0a\xe8y\xa7\x8a\xd4\xe2s\x8f\x80\x14!" +
	"9\xe4\x14m\xa4\x9a\xaf\x8e\x05s\xd1)\x15\x90j>" +
	"\x9f|\xf3x\xcd\x7f\x0a \x15~~\xf2\x9f\xf7\x03\x00" +
	"\x00\xff\xffx\xcb\x88\x0b"

func init() {
	schemas.Register(schema_ae9223e76351538a,
		0x8932d2d84f4dd27a,
		0x8a228653b964fd48,
		0xa4a421ce00f301dd,
		0xc0029f81b3eee594,
		0xd39d451d9280dd95,
		0xd5a2538369c2f82a,
		0xdc74a897ce683c6b,
		0xe419a0e5a661965c,
		0xe615914de76be38f,
		0xe7b4959415dabf9c,
		0xea06cde76066cf7d,
		0xecfda38634f4591a,
		0xee5217621d9cbb3a,
		0xf9737539703ade0c)
}
